"""Add locations field and valid_location_codes table

Revision ID: 085d4683e519
Revises:
Create Date: 2025-08-08 01:14:04.434977

"""

from typing import Sequence
from typing import Union

import pycountry
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "085d4683e519"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create valid_location_codes table
    op.create_table(
        "valid_location_codes",
        sa.Column("code", sa.String(10), nullable=False),
        sa.PrimaryKeyConstraint("code"),
    )

    # Populate valid location codes
    valid_codes = []
    for country in pycountry.countries:
        valid_codes.append({"code": country.alpha_2})
    for subdivision in pycountry.subdivisions:
        valid_codes.append({"code": subdivision.code})

    op.bulk_insert(
        sa.table("valid_location_codes", sa.Column("code", sa.String(10))), valid_codes
    )

    # Add locations column to job table
    op.add_column("job", sa.Column("locations", sa.ARRAY(sa.String()), nullable=True))

    # Add constraint using PostgreSQL array containment with proper type casting
    valid_codes_list = [country.alpha_2 for country in pycountry.countries] + [
        subdivision.code for subdivision in pycountry.subdivisions
    ]
    codes_array = (
        "ARRAY["
        + ",".join(f"'{code}'::text" for code in valid_codes_list)
        + "]::text[]"
    )
    op.execute(
        f"""
        ALTER TABLE job
        ADD CONSTRAINT check_valid_location_codes CHECK (
            locations IS NULL OR locations::text[] <@ {codes_array}
        )
        """
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop constraint and column
    op.execute("ALTER TABLE job DROP CONSTRAINT IF EXISTS check_valid_location_codes")
    op.drop_column("job", "locations")

    # Drop valid_location_codes table
    op.drop_table("valid_location_codes")
